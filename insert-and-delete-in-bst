// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>

using namespace std;

struct node {
	int data;
	struct node* left;
	struct node* right;
};


void printTree(struct node* root) {
	if (root == NULL) return;
	printTree(root->left);
	cout << root->data << " ";
	printTree(root->right);
}

struct node* newNode(int value) {
	struct node* root = (struct node*)malloc(sizeof(struct node*));
	root->data = value;
	root->right = root->left = NULL;
	return (root);
}



node* Insert(node* root, int data) {
	if (root == NULL) {
		root = new node();
		root->data = data;
		root->left = root->right = NULL;
	}
	else if (data <= root->data)
		root->left = Insert(root->left, data);
	else
		root->right = Insert(root->right, data);
	return root;
}

node* FindMin(node* root)
{
	while (root->left != NULL) root = root->left;
	return root;
}

struct node* remove(struct node* root, int val) {
	
	if (root == NULL) return root;
	else if (val < root->data) root->left = remove(root->left, val);
	else if (val > root->data) root->right = remove(root->right, val);

	else {
		if (root->left == NULL && root->right == NULL) {
			delete root;
			root = NULL;
		}
		//Case 2: One child 
		else if (root->left == NULL) {
			struct node* temp = root;
			root = root->right;
			delete temp;
		}
		else if (root->right == NULL) {
			struct node* temp = root;
			root = root->left;
			delete temp;
		}

		else if(root->right != NULL && root->left != NULL){
			// the taregt node have 2 childern select the smaller node in right sub tree
			struct node* temp = FindMin(root->right);
			root->data = temp->data;
			root->right = remove(root->right, temp->data);
		}

	}

	return root;
}

int main()
{
	struct node* root = NULL;
	int arr[] = { 10,5,15,3,12,20,6 };
	root = Insert(root, 10);
	root = Insert(root, 5);
	root = Insert(root, 6);
	root = Insert(root, 1);
	
	root = remove(root, 10);

	printTree(root);
	
}
